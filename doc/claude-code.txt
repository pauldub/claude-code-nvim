*claude-code.txt*    Minimal Claude Code integration for Neovim

==============================================================================
CONTENTS                                                    *claude-code-contents*

  1. Introduction .......................... |claude-code-introduction|
  2. Setup ................................. |claude-code-setup|
  3. Commands .............................. |claude-code-commands|
  4. Configuration ......................... |claude-code-configuration|
  5. API ................................... |claude-code-api|

==============================================================================
INTRODUCTION                                            *claude-code-introduction*

Claude Code Neovim provides a minimal integration with Claude Code CLI,
offering a single command to interact with Claude AI directly from Neovim.

Requirements:
- Neovim >= 0.5
- Claude Code CLI installed (https://claude.ai/code)

==============================================================================
SETUP                                                          *claude-code-setup*

Add to your Neovim configuration:

Using lazy.nvim: >lua
  {
    "pauldub/claude-code-nvim",
    config = function()
      require('claude-code').setup({
        -- Configuration options (optional)
        timeout = 30000,  -- milliseconds
        split_direction = "horizontal"  -- or "vertical"
      })
    end
  }
<

Using packer.nvim: >lua
  use {
    'pauldub/claude-code-nvim',
    config = function()
      require('claude-code').setup()
    end
  }
<

==============================================================================
COMMANDS                                                    *claude-code-commands*

                                                                        *:Claude*
:Claude {prompt}      Send a prompt to Claude and display the response in a
                      new split buffer with markdown syntax highlighting.

                      Examples:
                      `:Claude explain this function`
                      `:Claude refactor for better performance`
                      `:Claude write tests for this code`

==============================================================================
CONFIGURATION                                          *claude-code-configuration*

The setup function accepts a configuration table with the following options:

                                                         *claude-code-config.timeout*
timeout               Number of milliseconds before the Claude command times
                      out. Default: 60000 (1 minute)

                                                 *claude-code-config.split_direction*
split_direction       Direction to open the output split. Can be "horizontal"
                      or "vertical". Default: "horizontal"

                                                   *claude-code-config.output_format*
output_format         Output format for Claude responses. Can be "text", "json",
                      or "stream-json". Default: "json"
                      
                      - "text": Plain text output
                      - "json": Structured JSON with metadata (recommended)
                      - "stream-json": Streaming JSON for real-time output

                                                   *claude-code-config.show_metadata*
show_metadata         Whether to display metadata (cost, duration, session ID)
                      at the top of the output. Only applies when output_format
                      is "json". Default: false

                                                         *claude-code-config.debug*
debug                 Enable debug logging to see detailed execution
                      information. Default: false

Example configuration: >lua
  require('claude-code').setup({
    timeout = 180000,  -- 3 minute timeout
    split_direction = "vertical",
    output_format = "json",  -- structured output with metadata
    show_metadata = true  -- display cost and timing info
  })
<

==============================================================================
API                                                              *claude-code-api*

                                                               *claude-code.setup()*
setup({config})       Initialize the plugin with optional configuration.
                      Parameters:
                      - {config} (table|nil): Configuration options

                                                                 *claude-code.run()*
run({prompt})         Run Claude with a prompt and return the response.
                      Parameters:
                      - {prompt} (string): The prompt to send to Claude
                      Returns:
                      - (string): Claude's response
                      - (table|nil): Metadata when output_format is "json"

                                                       *claude-code.claude_command()*
claude_command({args})  Execute the Claude command (used internally).
                        Parameters:
                        - {args} (string): Command arguments

==============================================================================
vim:tw=78:ts=8:ft=help:norl: